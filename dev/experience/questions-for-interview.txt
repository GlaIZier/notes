Middle, Senior

Java:
Representation of information in computer? // 2
What is the size of Integer in 32 bit and 64bit Java? // 4 bytes
Max value of Integer? // 2^31 - 1? Why -1? How to get it in Java? // Integer.MAX_VALUE
What will happen if we increment max int by one? // -2147483648
What structure String is based on?
What is complexity of String.substring() in Java? Java 6, 7? Why did they change the behavior?
What is the design of HashMap? What if hashCode() and equals() depend on a state and the state is mutable? 

Java8:
What is the type of lambda? How does Java understand the type of lambda? // context -> functional interface -> method check
How do closures work in lambdas? // static, instance, effectively final vars. Lambda holds copies of outside local variables because they are stored on the stack and there can be problems with multithreading. Static and instance vars can be changed because they are in the heap/
What's the difference between Stream and Collection? // streams are constructed on the demand (prime numbers sequence is infinitive and this is OK for streams). Collection is eagerly constructed. It needs to hold the whole data inside. Streams conusumable only once.
How to avoid null checks and if checks in java? // Optional, map, filter, flatMap. map vs flatMap?


Recursion:
Tail is a recursion where the last operator is a call to another a recursed function or precedure
Non-tail - other one.
Tail can be converted to iterable process by compiler

Tests:
Dummy - just fill in param (new Smth("blabla"))
Fake - simple realization of smth. Not ready for prod. (eg H2 db, Debug web server)
Stub - realization for tests that can check the state
Spy - stub which monitor calls. Usually it's a real object or bean on which u can change it's behavior or verify method calls
Mock - replacement of real objects which return predefined values

SOLID
Single responibility. 
One class - one purpose and do it well
Ex. class Order that shows orders, get them from db, print them -> Order, OrderRepository for db, OrderPrinter

Open/closed principle
Open to extend, closed to modification.
Ex. use interfaces -> DaoInterface and MySqlDao, PostgresDao, CloudDao, RestDao...

Liskov Substitution
Fucntions that use base classes should be able to use derived classes instead of base without knowing nothing about it.
Before method call conditions can't be extended in derived class
After conditions can't be weaken in derived class 
Ex. Square derived from Rectangle. Square class weaked condition to size of height and width. They became equal.

Interface Segregation
Client doesn't have to depend on interface methods he doesn't need. U should use more specific interfaces instead of one universal
Ex. One interface to send data and to flush results somewhere. U need to separate it.
Ex. of bad practice: SQLException fits several exceptions (no connect, wrong syntax, constaint error ...) that can't tell u what is actually going on.

Dependency invertion
High-level modules should not depend on low-level modules. Both should depend on abstractions.
Abstractions should not depend on details. Details should depend on abstractions.
In simple words high level abstraction (business logic) has to depend on low level abstraction (inteface of low level classes such as work with IO or http e.g. or abstract layer)
Ex. In one class (method) we create another object of some class. -> create interface (abstraction) of created object and we can provide this realization of interface to the method or use container's dependency injection  
Another way to use this principe is to use container's dependency injection, service locator antipattern or plugin

Generics:

// Covariance and contrvariance?
Arrays are covariant in Java: [Fruit] <- [Apple] <- [Jonathan]:
Fruit[] fruits = new Apple[10];
fruits[0] = new Apple(); // Ok
fruits[1] = new Jonathan(); // Ok
But the actual type is Apple[], so
fruits[2] = new Fruit() // Exception
fruits[3] = new Orange // Exception

List<? extends Number> l = new ArrayList<Integer>();
l = new ArrayList<Double>();
l = new ArrayList<Number>();
//        l = new ArrayList<Object>();
//        l.add(new Object());
//        l.add(new Integer(5));
l.add(null);

List<? super Number> l2 = new ArrayList<Number>();
l2 = new ArrayList<Object>();
//        l2 = new ArrayList<Integer>();
l2.add(new Integer(5));
l2.add(new Number() {...});
//        l2.add(new Object());
l2.add(null);


//Difference between raw type, Object and unbound
The main difference is that the first line compiles but the second does not:

List<?> list = new ArrayList<String> (); // Ok
List<Object> list = new ArrayList<String> (); // Error
However, because you don't know what the generic type of List<?> is, you can't use its parameterized methods:

List<?> list = new ArrayList<String> ();
list.add("aString"); //does not compile - we don't know it is a List<String>
list.clear(); //this is fine, does not depend on the generic parameter type
As for the difference with raw types (no generics), the code below compiles and runs fine:

List list = new ArrayList<String> ();
list.add("aString"); // Ok
list.add(10); // Ok

And one other difference is ideological: 
List is a raw type, deprecated. We say that this list can be one with different types inside: like String, number, Object.
List of unbound <?> we say that we don't know the exact type, but the type must be the only one: only String eg. So we can't add there anything and we can get only Object.
List of Object is just a list of object. 
List<? extends Object> is almost the same as List<?>: but T extends Object & Foo will cause T to become Object under erasure, whereas T extends Foo cause T to become Foo 

Reflection:
DynamicProxy:
class DynamicProxyHandler implements InvocationHandler {
	public DynamicProxyHandler(Object proxied) {
		this.proxied = proxied;
	}
	public Object invoke(Object proxy, Method method, Object[] args) {
		... // some proxy logic
		return method.invoke(proxied, args);
	}
}
RealObject real = new RealObject();
Interface proxy = (Interface) Proxy.newProxyInstance(Interface.class.getClassLoader(), new Class[]{ Interface.class }, new DynamicProxyHandler(real));
proxy.m();


How to create an array of generics? // new Object[] and casting but then while returning this array as T[] there will be class cast exception because actually it is Object[] or  public GA(Class<T> type, int size) {
        a = (T[]) Array.newInstance(type, size);
    }
}

Multithreading:
What is the design of ConcurrentHashMap? 
Atomic implementation:
Usage of atomic hardware function (implemented in dif environments different) compareAndSwap that compares two values (memory cells: valueOffset and expect) and if true swap with update value. Function returns true if there was swap.
Java code:
compareAndSwapInt(this, valueOffset(current value in memory?), expect, update)
while (true) {
	int cur = get(); // get current value volatile. So valueOffset after success exec of compareAndSet will get next value 
	int next = cur + 1;
	if (compareAndSet(cur, next)
		return next;
}
compareAndSet(...) {
	return unsafe.compareAndSwap(this, valueOffset, cur, next);
}

what class is used for compareAndSwap? // Unsafe
How to manage memory manually in Java or not to declare throwable Exception or not to initialize class with provided variables? // Unsafe

CopyOnWriteArrayList - copy full array on write to avoid concurrency modification exception

Multithread singleton implementation:
private static final Singleton INSTANCE = new Singleton(); // init by class loader that guaranties to be happend without concurrency issues


class IncrementorThread extends Thread {

	private static volatile int i; // doesn't work because we don't cache inside thread but this doesn't make i++ atomic. 3 oper : read i; i++; write i. So we can loose results

	public void run() {
		for (int ii = 0; ii < 100_000; ii++)	
			increment();
	} 

	// doesn't work because each object is lock on it's own lock. But variable is shared because it is static. We can add static to the method or add static lock to make this work
	public synchronized increment() {
		i++;
	}

}

Is int atomic in java?
// All memory accesses in Java are atomic by default, with the exception of long and double (which may be atomic, but don't have to be). It's not put very clearly to be honest, but I believe that's the implication. Note that atomicity is very different to volatility though.
When one thread updates an integer to 5, it's guaranteed that another thread won't see 1 or 4 or any other in-between state, but without any explicit volatility or locking, the other thread could see 0 forever.
With regard to working hard to get atomic access to bytes, you're right: the VM may well have to try hard... but it does have to. From section 17.6 of the spec:

What would happen if we place volatile on long or double?

What 2 problems does the synchronization solve? // visibility and shared access. 
What problem volatile may solve? // visibility
Design servlet with caching of factorization (long operation): sync -> conchashmap -> conchashmap with future.
Do we need volatile for atomic? // no
Happens-before relationship? // final, synchronized, volatile
How to make ArrayList concurrent-safe? // Collections.syncronizedList()
What is BlockingQueue? What is the best usage of it? How the blocking method put() can be interrupted* (interrupt the current thread)? // BlockingQueue - blocks in the lack of elements and when a queue is full, producer-consumer pattern
Design a progmam which can be split into many parallel threads. How many threads would u use? // ExecutorService. Depends on operations: blocking or non-blocking
What is a functional (persistent) data structure? // immutable data structure which always return a new ds on change every time with effective usage of previous state
How does the interruption work? // thread has a flag that should be checked manually to be able to interrupt 
Put

How does the threadpool work? // many threads with a queue:
General impression only :)
while (!pool.isShutdown()) {
    Runnable task = pool.waitForTaskOnQueue();
    task.run();
}
What will happen if we don't shutdown threadpool? // application won't stop as thereads are not daemons
Deadlock? // lock ordering
Other locks? // resource starvation when singleexecutor calls submit() inside a theread and is waiting for its result; livelock when transaction is always unsuccessful
Why final is crucial? // during construction in one thread, others can see fields in inconsistent state
Difference between synchronize and locks? // syncronized is intrinsic (more information about it in thread dumps)


Architecture: 
3 main traits in programming: good abstractions, wise state processing and semantic naming. Discuss. 
design a two-level cache with different strategies and stores
<T> List<T> filter(List<T> list, Predicate<T> predicate) {...} - final solution. Start with filtering list of Apple

Deadlock requirements:
// 1. At least one resource has to be shared.
// 2. At least one thread need to take one monitor and waits for another monitor
// 3. The monitor can't be steal from another task
// 4. There must be a ciclyc waiting


Algorithms:
What is hash?
What is good hash?
HashMap and TreeMap: internal structure?
Why is TreeMap sorted?
Why is HashMap unsorted?
Which one is faster?
Check if a number is a 2^x? O? O(log) if we divide and O(1) if (x & (x - 1)) == 0 beware of 0 case.
What is a good data structure for cache in Java with evicting and searching? // LinkedHashMap
How to implement a good data structure for it?
What is the complexity of substing?
Can you create a data structure for string that will return substring in constant time?
Angle between two arrows in clock? O()?
Check if a string is valid? )((()())()))(())))))))) O?


Spring:
When does spring create proxy using Dynamic proxy and using CGLib?
If we print bean.getClass().toString() what most probably will we have? // Proxy

Context initialization:
1. Config parsing (xml, Java, annotations, groovy)
AnnotateBeanDefinitionReader, BeanDefinitionReader, ClassPathBeanDefinitionScanner
Get BeanDefinition (Map<String, BeanDefinition>)
2. BeanDefinition setup
BeanDefinitionPostProcessor, BeanFactoryPostProcessor
E.g. replace ("${host}") -> ("127.0.0.1")
3. Custom FactoryBean creation
FactoryBean<T>
We can control process of bean creation by implementing FactoryBean interface
4. BeanFactory creates bean instances, using default Java constructors (?) (new MyBean) and FactoryBean from 3d step if needed
BeanFactory
5. Beans setup
BeanPostProcessor
beforeInitialization (before @PostConstruct) before proxy for that bean were created. Usually is used for injection (@Autowired).
afterInitialization (after @PostConstruct) after proxy for that bean were created (@Transactional, @Aspect)
E.g. BeanPostProcessors for @Autowired, @PostConstruct(CommonAnnotationBeanPostProcessor) and other annotations
Order of calls for BeanPostProcessors is detemined by Spring (enclosed inside Spring and bean postprocessors' sources eg AutowiredAnnotationBeanPostProcessor: 	private int order = Ordered.LOWEST_PRECEDENCE - 2;)
6. Move created beans to container
7. Context is up
ApplicationListener
(ContextRefreshedEvent, ContextStartedEvent ...)
E.g. Warm db cache (when we need all methods be @Transactional)
3 phases of bean constructions:
Constructor (before bean was setup, no context, no injection). 4th step
PostConstruct (after beforeInit methods of BeanPostProcessor, but before proxy) 5th step
ApplicationListener (after all proxies were setup)
Bean creation and init sequence:
E.g beanA is dependent on nothing, but beanB is dependent on beanA (beanA is injected in beanB)
Sequance:
1th for all, 2nd for all, 3 for all, 4th for all, 5th for beanA (and all beanPostprocessors for it: injection of all beans that beanA is dependent on and other beanPostProcessors before init, @PostConstruct init method for it (CommonAnnotationBeanPostProcessor for it), making all proxies for it and all after init bean post processors), 5th for beanB (inject beanA bean postprocessor and other before init, @PostConstruct init method, making all proxies and after init bean post processors). So the order of bean loading is implicitly determined by dependencies and transitive dependencies. 6th for all, 7th for all.


Server types:
Blocking or syncronious servers. Usually prefork model. It creates a process or a thread for each connection. If there is a call to some long time operation like db access or a disc scan then the process will be blocked until it is finished. This thread can't be used to process another request.
Non-blocking. If there will be a blocking operation then it will return current available state for client. And after some time client can try one more time.
Asynchronious. Like nginx or node.js. There is a main worker which process requests. If there is a blocking operation then worker will place a callback for this function and continue operate other requests. When blocking operation is finished then a callback will be called and first request will be processed.
Async multithreading. Many threads with async model


Linux: 
You have a cluster. And it becomes to respond not every time or it takes so much time to respond. What would u do to understand what is the reasone of that? // ping, top, logs, ps to find logs, systemctl, iptables.
U have some library that is a wrapper around some api? And it returns some weird error, or not what u expected. What would u do? With sources? Without sources? // tcpdump, Wireshark
systemctl list-unit-files --type=service | grep Cogito | awk '{print $1}' | xargs systemctl <status/restart/stop/start>

Git:
Typical flow? // git log, git branch, git branch --remote, git branch, git checkout, git merge
How to make one commit from two? // rebase --interactive HEAD~2 pick   b76d157 b squash a931ac7 c git push -f origin master

Programming processes and practices:
How do you tests?
Which tests do you write?
How you launch them?
How do u deploy in your company?
How do u debug?


DB:
What are indexes?
Do we always need indexes?
When full scan can be faster than index search?
Will index work if index.substring(3, 7)?
Cover index?
Cluster index and non one? // index connected to the data itself
The most typic datastructure to store indexes? // b-tree
B-tree? Hash index? Diff? When do we need to choose one or other?
Why doesn't index work? // substring(3, 5) of string, wrong order of composite index, small table
Isolation levels? // 
Уровень изоляции	Фантомное чтение	Неповторяющееся чтение	«Грязное» чтение	Потерянное обновление[3]
SERIALIZABLE	+	+	+	+
REPEATABLE READ	-	+	+	+
READ COMMITTED	-	-	+	+
READ UNCOMMITTED	-	-	-	+
NULL	-	-	-	-


JS
What is a closure, and how/why would you use one? // Each function has Lexical Environment where it stores all variables, functions and a link to the external function = [[Scope]]. So, we can see all external variables using [[Scope]]. Closure - a function with all external accessible variables. If u create a function using new than it will have [[Scope]] = window, so it can't use closures
What are the differences between variables created using let, var or const? // When resolving a variable, javascript starts at the innermost scope and searches outwards. Unlike var , let and const are block scoped. Another difference that let and const have when compared to var is the fact that while var gives a undefined error when accessed before declaring, let and const give a ReferenceError if they are accessed before declaration.
this in different contexts:
As method:
obj.func(...) // this = obj
obj["func"](...)
Ordinary call:
func(...) // this = window (ES3) /undefined (ES5)
During the construction this = undefined too
new:
new func() // this = {} (новый объект)
Explicit :
func.apply(context, args) // this = context
func.call(context, arg1, arg2, ...)



General
- Why do u program on ...?
- Why did u retire from other job?
- What  do motivates people to work?
- Why do people retire from last jobs?
- What books/articles did u read?
- Good code and bad code? Why is it bad?
- What problems did u solve and how?
- What is a good architecture?

Http, protocols?
- How many levels are there for TCP/IP? // app (http)-> transport (tcp/udp) -> network(ip/ipv6) -> physical
- What is protocol in general?
- POST/GET diff?



Tasks:
- Angle between two arrows in clock? O()?
- Check if a string is valid? )((()())()))(())))))))) O?
- Check if a number is a 2^x? O?
- Invert a string? O?
- Add numbers as string without casting???? O?
